#!/usr/bin/env python

import paramiko
import threading
import time
import subprocess
import re
from ipaddress import ip_network

#Module for output coloring
from colorama import init, deinit, Fore, Style

#Initializing colorama
init()

file_with_range = raw_input(Fore.BLUE + Style.BRIGHT + "Please enter the name and extension of the file with IP range: ")
print ""
file_with_passwords = raw_input(Fore.BLUE + Style.BRIGHT + "Please enter the name and extension of the file with passwords: ")
print ""
local_ip = raw_input(Fore.BLUE + Style.BRIGHT + "Please enter the local IP address: ")
print ""

#Opening file with passwords for reading
password_file = open(file_with_passwords, "r")

#Putting cursor to the beginning of the file
password_file.seek(0)

#Making a list, each element being a string in the file containing passwords
passwords = password_file.readlines()

#Iterating over list elements to get rid of "\n"
for i in range(0, len(passwords)):
    passwords[i] = passwords[i].rstrip("\n")

#Opening file with IP range for reading 
range_file = open(file_with_range, "r")

#Putting cursor to the beginning of the file
range_file.seek(0)

#Getting rid of "\n"
ip_range = range_file.readlines()[0].rstrip("\n")

#Finding IP addresses within the given range
network_addresses = list(ip_network(ip_range).hosts())

#Converting each IP address into a string format
for i in range(0, len(network_addresses)):
    network_addresses[i] = str(network_addresses[i])

print Fore.GREEN + Style.BRIGHT + "Searching for reachable addresses... Please wait, it may take some time" + "\n"

#Defining a function pinging each address within the given range   
def ping_conn(ip):
    
    #Putting a variable to the global namespace
    global reachable_addresses
    reachable_addresses = []
    time.sleep(1)    
    ping_reply = subprocess.call(['ping', '-c', '3', '-q', '-n', ip], stdout = subprocess.PIPE)
    
    #Adding reachable addresses to the 'reachable_addresses' list
    if ping_reply == 0:
        reachable_addresses.append(ip)
 
#Creating threads for 'ping_conn' function       
def create_threads():
    threads = []
    for ip in network_addresses:
        th = threading.Thread(target = ping_conn, args = (ip,))
        th.start()
        threads.append(th)
    for th in threads:
        th.join()

#Calling the function with threads
create_threads()

#Sorting the list, element being in the ascending order
reachable_addresses.sort()
        
print Fore.WHITE + Style.BRIGHT + "Reachable addresses within " + ip_range + " network are:" 

for address in reachable_addresses:
    print Fore.BLUE + Style.BRIGHT + address

print ""

#Removing the IP address of the local PC from the list
for address in reachable_addresses:
    if address == local_ip:
        reachable_addresses.remove(address)

print Fore.GREEN + Style.BRIGHT + "Establishing SSH connection with reachable devices..." + "\n"
    
#Establishing SSH connection
def open_ssh_conn(ip,password):
    
    try:
        
        session = paramiko.SSHClient()
        session.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        session.connect(ip, username = 'admin', password = password)
        connection = session.invoke_shell()
        connection.send("terminal length 0\n")
        time.sleep(1)
        connection.send("\n")
        connection.send("show version" + "\n")
        time.sleep(1)
        connection.send("show interfaces" + "\n")
        time.sleep(1)
        connection.send("show inventory" + "\n")
        time.sleep(1)
        router_output = connection.recv(65535)
        dev_hostname = re.search(r"(.+) uptime is", router_output)
        hostname = dev_hostname.group(1)
        dev_os = re.search(r"\), Version (.+),", router_output)
        os = dev_os.group(1)
        interfaces = re.findall(r"\w+(?:\d|\/|\d)+ is .+", router_output)
        dev_hardware = re.search(r"(\w+\s\d+\s\(.+\))", router_output)
        hardware = dev_hardware.group(1)
        modules = re.findall(r'\".+\"(?=,\sDESCR)', router_output)
        time.sleep(1)
        print Fore.WHITE + Style.BRIGHT + "Device hostname: " + Fore.BLUE + Style.BRIGHT + hostname + "\n"
        print Fore.WHITE + "Managment IP address: " + Fore.BLUE + Style.BRIGHT + ip + "\n"
        print Fore.WHITE + "Password: " + Fore.BLUE + Style.BRIGHT + password + "\n"
        print Fore.WHITE + "OS version: " + Fore.BLUE + Style.BRIGHT + os + "\n"
        print Fore.WHITE + "Hardware version: " + Fore.BLUE + Style.BRIGHT + hardware + "\n"
        print Fore.WHITE + "Modules: "
        for module in modules:
            print Fore.BLUE + Style.BRIGHT +  "*" + Fore.BLUE + Style.BRIGHT + module + "\n"
        print Fore.WHITE + "Interfaces: "
        for interface in interfaces:
            print Fore.BLUE + Style.BRIGHT +  "*" + Fore.BLUE + Style.BRIGHT + interface + "\n"
        session.close()
        
    except paramiko.AuthenticationException:
        print Fore.RED + Style.BRIGHT + "Password " + password + " is not correct for " + ip + " device"

#Making threads for 'open_ssh_conn' function    
def ssh_threads():
    threads = []
    for ip in reachable_addresses:
        for password in passwords:
            th = threading.Thread(target = open_ssh_conn, args = (ip,password))
            th.start()
            threads.append(th)
    for th in threads:
        th.join()

#Calling the function with threads
ssh_threads()

#Deinitializing colorama
deinit()